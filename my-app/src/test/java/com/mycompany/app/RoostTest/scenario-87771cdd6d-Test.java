// ********RoostGPT********
/*
Test generated by RoostGPT for test credential-integration-artillery using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\r\n' +
    '    Given authorization ID\r\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
    '    Then the response status code should be 200 for a successful delete\r\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;

import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.io.*;

public class scenario87771cdd6dTest {

    private static List<String> urlToTest;

    @BeforeEach
    public void setUp() throws IOException {
        // Define OS-specific file separator and path to the payload file
        String fileSeparator = System.getProperty("file.separator");
        String path = Paths.get("src","test", "java", "com", "mycompany", "app", "RoostTest",
                "scenario-87771cdd6d-Test.csv").toString();

        BufferedReader reader = new BufferedReader(new FileReader(path));
        String line;
        urlToTest = null;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }

            String[] data = line.split("\\^\\|\\^");
            // Skip headers
            if (data[0].equals("METHOD")) {
                continue;
            }

            urlToTest = Arrays.asList(data);
        }
        // Close the reader
        reader.close();
    }

    @Test
    public void testScenario() {
        // Iterate over each URL and make request
        for (int i = 0; i < urlToTest.size(); i += 6) {
            String method = urlToTest.get(i);
            String url = urlToTest.get(i + 1);
            String reqHeaders = urlToTest.get(i + 2);
            String reqBody = urlToTest.get(i + 3);
            int responseCode = Integer.parseInt(urlToTest.get(i + 4));
            String responseBody = urlToTest.get(i + 5);

            RestAssured.baseURI = url;
            RequestSpecification request = RestAssured.given();

            // Fill request headers
            String[] headers = reqHeaders.substring(1, reqHeaders.length() - 1).split(",");
            for (String header : headers) {
                String[] kv = header.split(":");
                request.header(kv[0].substring(1, kv[0].length() - 1),
                        kv[1].substring(1, kv[1].length() - 1));
            }

            // Send request
            Response response;
            switch(method) {
                case "DELETE":
                    response = request.delete();
                    break;
                case "GET":
                    response = request.get();
                    break;
                default:
                    throw new UnsupportedOperationException("HTTP method not supported");
            }

            //Assert that correct status code is returned.
            Assertions.assertEquals(responseCode, response.getStatusCode(), 
                "Incorrect Response Code");

            //Assert that correct body is returned.
            Assertions.assertEquals(responseBody, response.getBody().asString(), 
                "Incorrect Response Body");
        }
    }
}

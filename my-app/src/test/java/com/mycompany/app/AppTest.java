package com.mycompany.app;

import static org.junit.Assert.assertTrue;


// import org.junit.Test;

/*
Test generated by RoostGPT for test Integration-RestAssuredTest using AI Type Open AI and AI Model gpt-4

{
  background: null,
  rule: null,
  scenario: 'Create a new product\r\n' +
    '    Given the client provides the following product data:\r\n' +
    '      | name        | description              | price |\r\n' +
    '      | Test Product | This is a test product. | 10.0  |\r\n' +
    '    When the client sends a POST request to "/api/products"\r\n' +
    '    Then the saved product should not be null and its properties must correspond to those provided by client',
  title: 'Create a new product'
}

package com.bootexample4.RoostTest;
*/
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.notNullValue;

// Test generated by RoostGPT for test hsbcdemo using AI Type Azure Open AI and AI Model roost-gpt4-32k
// Test generated for /products_get for http method type GET in rest-assured framework
// RoostTestHash=ed0d766b50

// package com.bootexample4.RoostTest;
// import io.restassured.RestAssured;
// import io.restassured.http.ContentType;
// import io.restassured.response.Response;
// import org.junit.Test; 
// import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
// import static org.hamcrest.text.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Unit test for simple App.
 */
public class AppTest 
{
    /**
     * Rigorous Test :-)
     */

    /*
    @Test
    public void shouldAnswerWithTrue()
    {
        // System.out.println('test for shouldAnswerWithTrue');
        assertTrue( true );
    }


    @Test
    public void createANewProduct() {

        // Configuring the RestAssured
        RestAssured.baseURI = "http://34.131.81.54:8080"; // System.getenv("ROOST_SERVER_URL");
        RestAssured.basePath = "/api";

        // Defining the payload
        String payload = "{\n" +
                "  \"name\": \"Test Product\",\n" +
                "  \"description\": \"This is a test product.\",\n" +
                "  \"price\": 10.0\n" +
                "}";

        // Defining the headers
        // String headers = "{\n" +
        //         "  \"Content-Type\": \"application/json\"\n" +
        //         "}";

        // Sending the POST request to create a new product
        Response response = given()
                .contentType(ContentType.JSON)
                .body(payload)
                // .headers("Content-Type", "application/json")
                .post("/products");

        System.out.println(response);
        // Checking the response status code and body
        response.then()
                .assertThat()
                .statusCode(200)
                .body("name", equalTo("Test Product"))
                .body("description", equalTo("This is a test product."))
                .body("price", equalTo(10.0F))
                .body("id", notNullValue());

        // Comment: The product should be created successfully with the provided data and the id should not be null
    }

*/
 

    @Test  
    public void productsGetTest() {  
        Logger logger = LoggerFactory.getLogger(AppTest.class);
        logger.info("Hello World");
        RestAssured.baseURI = "http://34.131.81.54:8080/api"; // System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/mycompany/app/productsGetTest.csv"))) {  
            // String headerLine = reader.readLine();  

            // logger.info(headerLine);
            // String[] headers = headerLine.split(",");  
  
            // String line;  
            // while ((line = reader.readLine()) != null) {  
            //     String[] data = line.split(",");  
            //     logger.info(line);
  
            //     // Create a map of header to data  
            //     Map<String, String> map = new HashMap<>();  
            //     for (int i = 0; i < headers.length; i++) {  
            //         map.put(headers[i], data[i]);  
            //     }  
                

                Response response = given()
                .when()
                .get("/products/5")  
                .then() 
                .extract().response();  

                // logger.info(String(response));
                // logger.info(JSON.getString(response));
                logger.info("code: {}", response.statusCode());
                if (response.statusCode() == 200) {

                            logger.info("Description: Successful operation");
        
                    if (response.jsonPath().get("id") != null) {
                        MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(Integer.class));
                        // MatcherAssert.assertThat(response.jsonPath().getString("id"), Number.isSafeInteger(
                        //   response.jsonPath().getInt("id")
                        // )); 
        
                    }
        
                    if (response.jsonPath().get("name") != null) {
                        MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));  
                     }
        
                    if (response.jsonPath().get("description") != null) {
                        MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));  
                     }
        
                    if (response.jsonPath().get("price") != null) {
                        MatcherAssert.assertThat(response.jsonPath().get("price"), instanceOf(Integer.class));
                        // MatcherAssert.assertThat(response.jsonPath().getString("price"), Number.isSafeInteger(
                        //   response.jsonPath().getInt("price")
                        // )); 
        
                    }
				}
  
        //     }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

}
